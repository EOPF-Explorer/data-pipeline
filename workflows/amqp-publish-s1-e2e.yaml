---
apiVersion: v1
kind: ConfigMap
metadata:
  name: amqp-payload-s1-e2e
  namespace: devseed-staging
data:
  body.json: |
    {
      "source_url": "https://stac.core.eopf.eodc.eu/collections/sentinel-1-l1-grd/items/S1A_IW_GRDH_1SDV_20251003T055837_20251003T055902_061257_07A400_1BF0",
      "item_id": "S1A_IW_GRDH_20251003T055837_optimized_test",
      "collection": "sentinel-1-l1-grd-dp-test"
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: amqp-publish-s1-e2e-optimized
  namespace: devseed-staging
  labels:
    app: amqp-publisher
    test: s1-e2e-optimized
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: publish
          image: python:3.11-slim
          env:
            - name: AMQP_HOST
              value: "rabbitmq.core.svc.cluster.local"
            - name: AMQP_PORT
              value: "5672"
            - name: AMQP_EXCHANGE
              value: "geozarr"
            - name: AMQP_ROUTING_KEY
              value: "eopf.items.sentinel-1-l1-grd"
            - name: AMQP_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: username
            - name: AMQP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: password
          volumeMounts:
            - name: payload
              mountPath: /payload
          command:
            - /bin/bash
            - -c
            - |
              set -e
              pip install -q pika tenacity
              cat <<'PUBLISH_SCRIPT' > /tmp/publish.py
              import json
              import logging
              import pika
              from tenacity import retry, stop_after_attempt, wait_exponential

              logging.basicConfig(level=logging.INFO)
              logger = logging.getLogger(__name__)

              @retry(stop=stop_after_attempt(5), wait=wait_exponential(multiplier=1, min=2, max=10))
              def publish_message(host, port, user, password, exchange, routing_key, payload_file):
                  with open(payload_file) as f:
                      payload = json.load(f)

                  credentials = pika.PlainCredentials(user, password)
                  parameters = pika.ConnectionParameters(host=host, port=port, credentials=credentials)
                  connection = pika.BlockingConnection(parameters)
                  channel = connection.channel()

                  channel.exchange_declare(exchange=exchange, exchange_type='topic', durable=True)
                  channel.basic_publish(
                      exchange=exchange,
                      routing_key=routing_key,
                      body=json.dumps(payload),
                      properties=pika.BasicProperties(content_type='application/json', delivery_mode=2)
                  )

                  logger.info(f"Published to {exchange}/{routing_key}: {payload}")
                  connection.close()

              if __name__ == "__main__":
                  import os
                  publish_message(
                      os.getenv("AMQP_HOST"),
                      int(os.getenv("AMQP_PORT", "5672")),
                      os.getenv("AMQP_USER"),
                      os.getenv("AMQP_PASSWORD"),
                      os.getenv("AMQP_EXCHANGE"),
                      os.getenv("AMQP_ROUTING_KEY"),
                      "/payload/body.json"
                  )
              PUBLISH_SCRIPT
              python /tmp/publish.py
      volumes:
        - name: payload
          configMap:
            name: amqp-payload-s1-e2e
