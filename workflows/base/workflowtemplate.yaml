apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: geozarr-pipeline
spec:
  serviceAccountName: operate-workflow-sa
  entrypoint: main
  archiveLogs: false
  ttlStrategy:
    secondsAfterCompletion: 86400
  podGC:
    strategy: OnPodSuccess
    deleteDelayDuration: 300s
  workflowMetadata:
    labels:
      workflows.argoproj.io/workflow-template: geozarr-pipeline
  arguments:
    parameters:
    - name: source_url
    - name: register_collection
      value: sentinel-2-l2a-dp-test
    - name: stac_api_url
      value: https://api.explorer.eopf.copernicus.eu/stac
    - name: raster_api_url
      value: https://api.explorer.eopf.copernicus.eu/raster
    - name: s3_endpoint
      value: https://s3.de.io.cloud.ovh.net
    - name: s3_output_bucket
      value: esa-zarr-sentinel-explorer-fra
    - name: s3_output_prefix
      value: tests-output
    - name: pipeline_image_version
      value: fix-unit-tests
  templates:
  - name: main
    dag:
      tasks:
      - name: convert
        template: convert-geozarr
      - name: register
        template: register-stac
        dependencies:
        - convert

  - name: convert-geozarr
    activeDeadlineSeconds: 3600
    script:
      image: ghcr.io/eopf-explorer/data-pipeline:{{workflow.parameters.pipeline_image_version}}
      imagePullPolicy: Always
      command: [python]
      resources:
        requests:
          memory: 4Gi
          cpu: '1'
        limits:
          memory: 8Gi
          cpu: '2'
      source: |
        /app/scripts/convert.py \
          --source-url "{{workflow.parameters.source_url}}" \
          --collection "{{workflow.parameters.register_collection}}" \
          --s3-output-bucket "{{workflow.parameters.s3_output_bucket}}" \
          --s3-output-prefix "{{workflow.parameters.s3_output_prefix}}" \
          --verbose
      env:
      - name: PYTHONUNBUFFERED
        value: '1'
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: geozarr-s3-credentials
            key: AWS_ACCESS_KEY_ID
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: geozarr-s3-credentials
            key: AWS_SECRET_ACCESS_KEY
      - name: AWS_ENDPOINT_URL
        value: '{{workflow.parameters.s3_endpoint}}'
      - name: ZARR_V3_EXPERIMENTAL_API
        value: '1'

  - name: register-stac
    activeDeadlineSeconds: 600
    script:
      image: ghcr.io/eopf-explorer/data-pipeline:{{workflow.parameters.pipeline_image_version}}
      imagePullPolicy: Always
      command: [python]
      ports:
      - containerPort: 8000
        name: metrics
      resources:
        requests:
          memory: 1Gi
          cpu: 500m
        limits:
          memory: 2Gi
          cpu: '1'
      source: |
        import os
        import sys

        # Extract item ID from source URL (for constructing geozarr_url)
        sys.path.insert(0, '/app/scripts')
        from utils import extract_item_id

        source_url = "{{workflow.parameters.source_url}}"
        collection = "{{workflow.parameters.register_collection}}"
        item_id = extract_item_id(source_url)
        geozarr_url = f"s3://{{{{workflow.parameters.s3_output_bucket}}}}/{{{{workflow.parameters.s3_output_prefix}}}}/{collection}/{item_id}.zarr"

        # Run registration workflow
        os.execv(
            sys.executable,
            [
                sys.executable,
                "/app/scripts/register.py",
                "--source-url", source_url,
                "--collection", collection,
                "--geozarr-url", geozarr_url,
                "--stac-api-url", "{{workflow.parameters.stac_api_url}}",
                "--raster-api-url", "{{workflow.parameters.raster_api_url}}",
                "--s3-endpoint", "{{workflow.parameters.s3_endpoint}}",
                "--verbose",
            ]
        )
      env:
      - name: PYTHONUNBUFFERED
        value: '1'
